import { useActiveAccount } from "thirdweb/react";

export const useRedemptionSignature = () => {
  const account = useActiveAccount();

  const generateSignature = async (
    sessionId: string,
    amount: number,
    shopId?: string
  ): Promise<string | null> => {
    try {
      if (!account) {
        return getMockSignature();
      }

      // Create the message to sign
      const message = `Approve Redemption Session:
Session ID: ${sessionId}
Amount: ${amount} RCN
Shop: ${shopId || "Unknown Shop"}
Timestamp: ${Date.now()}

By signing this message, you authorize the redemption of ${amount} RCN tokens.`;

      // Try to sign the message using Thirdweb's account
      if (account.signMessage) {
        const signature = await account.signMessage({ message });
        console.log("[useRedemptionSignature] Signature generated:", signature);
        return signature;
      }
      return getMockSignature();
    } catch (error) {
      console.error("[useRedemptionSignature] Error:", error);
      return getMockSignature();
    }
  };

  return {
    generateSignature,
    account,
    isConnected: !!account
  };
};

export const getMockSignature = (): string => {
  // This is a sample signature format for testing
  // Real signatures are generated by the wallet's private key
  const mockSig = (
    "0x" +
    "7c85d4b6174e72a0f7e3c9cd9f234567" + // r (32 bytes / 64 hex)
    "8abcdef1234567890abcdef123456789" +
    "0abcdef1234567890abcdef123456789" + // s (32 bytes / 64 hex)
    "0abcdef1234567890abcdef123456789" +
    "1c" // v (1 byte / 2 hex) - recovery id
  );
  
  console.log("[Signature] Generated mock signature:", mockSig);
  return mockSig;
};